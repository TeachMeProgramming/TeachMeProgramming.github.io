@mixin translationTransition($time) {
  -webkit-transition:  linear, left $time, top $time, -webkit-transform $time;
  transition: linear, left $time, top $time, transform $time;
}


@mixin keyframes($name) {// See http://stackoverflow.com/questions/18894981/sass-not-scss-syntax-for-css3-keyframe-animation
  @-webkit-keyframes #{$name}{
    @content;}
  @-moz-keyframes #{$name}{
    @content;}
  @-ms-keyframes #{$name}{
    @content;}
  @keyframes #{$name}{
    @content;}
}

@mixin animationIterationCount($iterations) {
  -webkit-animation-iteration-count: $iterations; /* Safari 4.0 - 8.0, according to w3schools. See http:;//www.w3schools.com/cssref/css3_pr_animation-iteration-count.asp*/
  animation-iteration-count: $iterations;
}


@mixin shake(){
  animation: mymove 0.2s;
  -webkit-animation-timing-function: linear /* Safari 4.0 - 8.0 */;
  animation-timing-function: linear;
  @include animationIterationCount(3) ;}// Not supported by IE 9 and earlier



@include keyframes(mymove){
  from{
    transform: translate(2px, 0px);}
  to{
    transform: translate(20px, 0px);}}

@include keyframes(mymove) {
  0% { // Start at the current location.
    transform: translate(0px, 0px);
  }
  25% {
    transform: translate(7px, 0px);
  }
  50% { // If any non-linear interpolation is used, the 50% position is needed to smooth the animation when looping.
    transform: translate(0px, 0px);
  }
  75% {
    transform: translate(-7px, 0px);
  }
  100% {
    // End at the initial location.
    transform: translate(0px, 0px);
  }
}

@mixin roundCorners() {
  border-radius: 5px ;}// rounded corners


@mixin boxShadow($alpha) {
  -webkit-box-shadow: 0 0 5px rgba(0,0,0,$alpha);
  -moz-box-shadow: 0 0 5px rgba(0,0,0,$alpha);
  box-shadow: 0 0 5px rgba(0,0,0,$alpha);
}






* {
  margin: 0;
  padding: 0;
  //border: 1px solid;
}

body {
  margin: 0;
  -webkit-user-select: none;
  -moz-user-select: -moz-none;
  -ms-user-select: none;
  user-select: none;
  cursor: default ;// The user can't select anything on the page. Don't let the cursor change to the text select cursor.
  display: flex;
  min-height: 100vh;
  flex-direction: column;
  background: #000;
}

body, html {
  margin: 0;
  height: 100%;
  overflow-x: hidden;
  overflow-y: hidden;
}

header {
  width: 100%;
  background-color: #222222;
  height: auto;
  display: flex;
  color: #EEE;
}

footer {
  background-color: #222222;
  color: #EEE;
  padding: 0 50px;
}

.game-screen {
  display: flex;
  flex-direction: row;
  flex: 1;
  position: relative;
}

.header-title {
  margin: auto;
  margin-left: 100px;
  user-select: none;
  display: inline-block;
  float: left;
}

.actor {
  position: absolute;
  @include translationTransition(1.5s);
}

.actor-box {
  position: absolute;
  top: 0;
  left: 0;
}

/////////////////////
///   GAME BOARD  ///
/////////////////////
.game-container {
  position: relative;
  float: left;
  margin-right: 10px;
  width: auto;
  height: auto;
  flex: 1;
}

// Game board container is used to draw different components of the level on top of each other.
// For example, actors have to draw on top of the level map.
// This is because game-container is position:relative and game-board-container is position:absolute.
.game-board-container {
  position: absolute;
  float: left;
  margin-right: 10px;
  width: auto;
  height: auto;
}


// Fixes the issue where unnecessary whitespace gets added between rows due to rows being display:block.
// See https://css-tricks.com/fighting-the-space-between-inline-block-elements/ for details.
// Warning: chrome does not display this properly at 80% and 90% zoom.
// Other zoom levels are fine. (54.0.2840.71 m (64-bit))
.row, .cell {
  font-size: 0;
}


//

.cell {
  width: 64px;
}

.actor {
  width: 64px;
}

/////////////////////
/// COMMAND ZONES ///
/////////////////////
.command-container {
  display: inline-block;
  color: #CCC;
  padding: 5px;
  height: 100% ;// Let the command zones take up all the space between header and footer
  width: 20%;
  font-size: 150%;
  overflow: hidden;
}



// As long as command height is bigger than all the containg elements, drag and drop does not have the seizure glitch.
$commandMargin: 5px ;// Space inbetween commands. Needed to calculate the position of command tooltips.
$commandHeight: 50px ;// CommandHeight. Needed for placeholder elements.
$tooltipBorderWidth: 1px ;// command-invalid-tooltip red border.
$dropzoneBGColor: #bbb;

.dropzone {
  order: 2;
  height: 90%;
  background: #999;
  padding: 3px;
  min-height: $commandHeight;
  @include roundCorners;
}

.dndDraggingSource {
  display: none;
}



/////////////////////
///    COMMAND    ///
/////////////////////
.command {
  position:relative;

  padding: 5px;

  display: flex;
  flex-direction: column;

  min-height: $commandHeight;
  //padding: 5px;
  background: #333; // #333440; Eventually we will want our theme to be tinted slightly.
  border: 2px solid $dropzoneBGColor ;// Margins do not work with the angularDND stuff, borders the same color as the BG work better.
  @include roundCorners;
  @include boxShadow(0.2);
}



.command-hover {
  background-color: #666;
  @include boxShadow(0.5);
}

.command-title {
  display: inline-block;
  color: #CCC;
  width: auto;
  //margin: 10px 20px;
}


.command-placeholder {
  height: $commandHeight;
  background: #DDD;
  @include roundCorners;
  @include boxShadow(0.7);
}

.command-executing {
  background: #393;
}

// The shine will keep drawing past the boundaries if the overflow is limited.
// This can not simply be applied to an existing parent element because dropdown menus have to extend past the boundaries of a command block.
.command-shine-container {
  overflow: hidden;
  position: absolute; // The shine is position: absolute. Without position: absolute here, overflow: hidden won't work.
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
}

.command-shine {
  /*   positioning */
  position: absolute;
  opacity: 0.2; // animate opacity to create shine.
  top: 0;
  left: 0;

  /*   gradient   */
  background: -moz-linear-gradient(left,  rgba(255,255,255,0) 0%, rgba(255,255,255,0.03) 1%, rgba(255,255,255,0.6) 30%, rgba(255,255,255,0.85) 50%, rgba(255,255,255,0.85) 70%, rgba(255,255,255,0.85) 71%, rgba(255,255,255,0) 100%); /* FF3.6+ */
  background: -webkit-gradient(linear, left top, right top, color-stop(0%,rgba(255,255,255,0)), color-stop(1%,rgba(255,255,255,0.03)), color-stop(30%,rgba(255,255,255,0.85)), color-stop(50%,rgba(255,255,255,0.85)), color-stop(70%,rgba(255,255,255,0.85)), color-stop(71%,rgba(255,255,255,0.85)), color-stop(100%,rgba(255,255,255,0))); /* Chrome,Safari4+ */
  background: -webkit-linear-gradient(left,  rgba(255,255,255,0) 0%,rgba(255,255,255,0.03) 1%,rgba(255,255,255,0.6) 30%,rgba(255,255,255,0.85) 50%,rgba(255,255,255,0.85) 70%,rgba(255,255,255,0.85) 71%,rgba(255,255,255,0) 100%); /* Chrome10+,Safari5.1+ */
  background: -o-linear-gradient(left,  rgba(255,255,255,0) 0%,rgba(255,255,255,0.03) 1%,rgba(255,255,255,0.6) 30%,rgba(255,255,255,0.85) 50%,rgba(255,255,255,0.85) 70%,rgba(255,255,255,0.85) 71%,rgba(255,255,255,0) 100%); /* Opera 11.10+ */
  background: -ms-linear-gradient(left,  rgba(255,255,255,0) 0%,rgba(255,255,255,0.03) 1%,rgba(255,255,255,0.6) 30%,rgba(255,255,255,0.85) 50%,rgba(255,255,255,0.85) 70%,rgba(255,255,255,0.85) 71%,rgba(255,255,255,0) 100%); /* IE10+ */
  background: linear-gradient(to right,  rgba(255,255,255,0) 0%,rgba(255,255,255,0.03) 1%,rgba(255,255,255,0.6) 30%,rgba(255,255,255,0.85) 50%,rgba(255,255,255,0.85) 70%,rgba(255,255,255,0.85) 71%,rgba(255,255,255,0) 100%); /* W3C */
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#00ffffff', endColorstr='#00ffffff',GradientType=1 ); /* IE6-9 */

  /*  forming the shine element
      play around with the width, skew and gradient to get different effects
    */
  width: 15%;
  height: 100%;
  transform: skew(-10deg,0deg);
  -webkit-transform: skew(-10deg,0deg);
  -moz-transform: skew(-10deg,0deg);
  -ms-transform: skew(-10deg,0deg);
  -o-transform: skew(-10deg,0deg);

  /*  animating it  */
  animation: translateRight 1.5;
  animation-iteration-count: infinite;
  //animation-delay: 1s;
  -webkit-animation: translateRight 1.5s;
  -webkit-animation-iteration-count: infinite;
  //-webkit-animation-delay: 1s;
  -moz-transform: skew(-10deg,0deg);
  -moz-animation: translateRight 1.5s;
  -moz-animation-iteration-count: infinite;
  //-moz-animation-delay: 1s;
  -ms-transform: skew(-10deg,0deg);
  -ms-animation: translateRight 1.5s;
  -ms-animation-iteration-count: infinite;
  //-ms-animation-delay: 1s;
  -o-transform: skew(-10deg,0deg);
  -o-animation: translateRight 1.5s;
  -o-animation-iteration-count: infinite;
  //-o-animation-delay: 1s;
}

.command-invalid {
  background: #933;
  @include shake;
}

.command-invalid-tooltip {
  background: #B55;
  position: absolute;
  transform: translatex(-110%) translatey(-100%) ;// Translatex to position the tooltip to the left of the command, translatey to align with the command. The translatey goes hand in hand with margin-top.
  margin-top: -($commandMargin - $tooltipBorderWidth) ;// tooltips are larger because of the border. In order to center vertically, we have to take that into account.
  padding: 5px;
  border: $tooltipBorderWidth solid #933;
  @include roundCorners;
}


// Triangle label.
.command-invalid-tooltip::after {// CSS triangle http://codepen.io/chriscoyier/pen/lotjh
  content: "";
  position: absolute;
  top: 50% ;// center vertically.
  transform: translateY(-50%) ;// center vertically.
  left: 100% ;// the width of this element.
  border-width: 8px;
  border-style: solid;
  border-color: transparent transparent transparent #B55;
}



/////////////////////
///     BUTTON    ///
/////////////////////
.button-container {
  display: inline-block;
  padding: 0 10px;
  float: left;
  margin-left: 10px;
  padding: 10px 0 10px 0;
}

.button {
  background-color: #163ea2;
  float: left;
  width: 120px;
  padding: 10px;
  margin: 0px 5px;
  border-radius: 3px;}

.button:hover {
  cursor: pointer;
  background-color: #2359e1;
}

.button-disable {
  background-color: #444;
  float: left;
  padding: 10px;
  margin: 0 5px;
  color: #777;
}

.button-disable:hover {
  cursor: default;
  background-color: #444;
  color: #777;
}



.grabable {
  cursor: -moz-grab;
  cursor: -webkit-grab;
}







/////////////////////
///    TOOLTIP    ///
/////////////////////
.tooltip {
  outline: none;
}

.tooltip:hover{
  text-decoration: none;
}

.tooltip span {
  z-index: 10;
  display: none;
  padding: 14px 20px;
  margin: -30px 0 0 28px;
  width: 300px;
  line-height: 16px;
}

.tooltip span:hover {
  display: inline;
  position: absolute;
  color: #111;
  border: 1px solid #DCA;
  background: #fffAF0;
}


/////////////////////
///    DROPDOWN   ///
/////////////////////

.dropdown-menu {
  display: inline-block;
  text-align: left;
  margin: 0;
  list-style: none;
  position: relative;
  font-size: 150%;
  cursor: pointer;
}
.dropdown-menu:after {
  content: "";
  position: absolute;
  top: 50% ;// center vertically.
  left: 100% ;// the width of this element.
  border-width: 8px;
  border-style: solid;
  border-color: #B55 transparent transparent transparent;
}

.dropdown-container {
  cursor: pointer;
  display: inline-block;
  position: relative;
  text-align: left;
  margin: 0;
  list-style: none;
  //font-size: 150%;
  //width:100px;
  //float: left;
  @include boxShadow(0.3);

  ul {
    position: absolute;
    top: 45px;
    left: 0;
    dipslay: none;
    z-index: 10;
    //opacity: 0;
    @include boxShadow(0.5);
    -webkit-transiton: opacity .2s;
    -moz-transition: opacity .2s;
    -ms-transition: opacity .2s;
    -o-transition: opacity .2s;
    -transition: opacity .2s;

    li {
      padding: 15px;
      background: #555;
      display: block;
      color: #fff;
      text-shadow: 0 -1px 0 #000;
    }

    li:hover {
      background: #333;
    }
  }
}

.dropdown {
  font: bold 12px/18px sans-serif;
  display: inline-block;
  margin-right: -4px;
  position: relative;
  padding: 15px 20px;
  background: #fff;
  cursor: pointer;
}


/////////////////////
///    VICTORY    ///
/////////////////////

.victory-container {
  background: white;
  opacity: 0.3;
  width: 100%;
  height: 100%;
  position: absolute;
  left: 0;
  top: 0;
}

.victory {
  color: white;
  position: absolute;
  font-size: 500%;
  align-items: center;
  top: 50%;
  left: 50%;
  transform: translatex(-50%) translatey(-50%);
}







/*  */
@keyframes translateRight {
  0%  { left: -10%; }
  100% { left: 105%; opacity: 0.5;}
}

@-webkit-keyframes translateRight {
  0%  { left: -10%;}
  100% { left: 105%; opacity: 0.5;}
}

@-moz-keyframes translateRight {
  0%  { left: -10%; }
  100% { left: 105%; opacity: 0.5;}
}

@-ms-keyframes translateRight {
  0%  { left: -10%; }
  100% { left: 105%; opacity: 0.5;}
}

@-o-keyframes translateRight {
  0%  { left: -10%; }
  100% { left: 105%; opacity: 0.5;}
}
